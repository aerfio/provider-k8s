//go:build !ignore_autogenerated

/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/intstr"
	"net/url"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssociativeType) DeepCopyInto(out *AssociativeType) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssociativeType.
func (in *AssociativeType) DeepCopy() *AssociativeType {
	if in == nil {
		return nil
	}
	out := new(AssociativeType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainsNestedMap) DeepCopyInto(out *ContainsNestedMap) {
	*out = *in
	if in.InnerMap != nil {
		in, out := &in.InnerMap, &out.InnerMap
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainsNestedMap.
func (in *ContainsNestedMap) DeepCopy() *ContainsNestedMap {
	if in == nil {
		return nil
	}
	out := new(ContainsNestedMap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CronJob) DeepCopyInto(out *CronJob) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CronJob.
func (in *CronJob) DeepCopy() *CronJob {
	if in == nil {
		return nil
	}
	out := new(CronJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CronJob) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CronJobList) DeepCopyInto(out *CronJobList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CronJob, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CronJobList.
func (in *CronJobList) DeepCopy() *CronJobList {
	if in == nil {
		return nil
	}
	out := new(CronJobList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CronJobList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CronJobSpec) DeepCopyInto(out *CronJobSpec) {
	*out = *in
	if in.StartingDeadlineSeconds != nil {
		in, out := &in.StartingDeadlineSeconds, &out.StartingDeadlineSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Suspend != nil {
		in, out := &in.Suspend, &out.Suspend
		*out = new(bool)
		**out = **in
	}
	if in.NoReallySuspend != nil {
		in, out := &in.NoReallySuspend, &out.NoReallySuspend
		*out = new(TotallyABool)
		**out = **in
	}
	if in.BinaryName != nil {
		in, out := &in.BinaryName, &out.BinaryName
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	in.JobTemplate.DeepCopyInto(&out.JobTemplate)
	if in.SuccessfulJobsHistoryLimit != nil {
		in, out := &in.SuccessfulJobsHistoryLimit, &out.SuccessfulJobsHistoryLimit
		*out = new(int32)
		**out = **in
	}
	if in.FailedJobsHistoryLimit != nil {
		in, out := &in.FailedJobsHistoryLimit, &out.FailedJobsHistoryLimit
		*out = new(int32)
		**out = **in
	}
	if in.ByteSliceData != nil {
		in, out := &in.ByteSliceData, &out.ByteSliceData
		*out = make(map[string][]byte, len(*in))
		for key, val := range *in {
			var outVal []byte
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.StringSliceData != nil {
		in, out := &in.StringSliceData, &out.StringSliceData
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			var outVal []string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.PtrData != nil {
		in, out := &in.PtrData, &out.PtrData
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DefaultedSlice != nil {
		in, out := &in.DefaultedSlice, &out.DefaultedSlice
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultedObject != nil {
		in, out := &in.DefaultedObject, &out.DefaultedObject
		*out = make([]RootObject, len(*in))
		copy(*out, *in)
	}
	if in.DefaultedEmptySlice != nil {
		in, out := &in.DefaultedEmptySlice, &out.DefaultedEmptySlice
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefaultedEmptyMap != nil {
		in, out := &in.DefaultedEmptyMap, &out.DefaultedEmptyMap
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	out.DefaultedEmptyObject = in.DefaultedEmptyObject
	in.EmbeddedResource.DeepCopyInto(&out.EmbeddedResource)
	out.UnprunedJSON = in.UnprunedJSON
	in.UnprunedEmbeddedResource.DeepCopyInto(&out.UnprunedEmbeddedResource)
	in.UnprunedFromType.DeepCopyInto(&out.UnprunedFromType)
	in.UnprunedFromTypeAndField.DeepCopyInto(&out.UnprunedFromTypeAndField)
	if in.AssociativeList != nil {
		in, out := &in.AssociativeList, &out.AssociativeList
		*out = make([]AssociativeType, len(*in))
		copy(*out, *in)
	}
	if in.NestedAssociativeList != nil {
		in, out := &in.NestedAssociativeList, &out.NestedAssociativeList
		*out = make(NestedAssociativeList, len(*in))
		copy(*out, *in)
	}
	if in.MapOfInfo != nil {
		in, out := &in.MapOfInfo, &out.MapOfInfo
		*out = make(map[string][]byte, len(*in))
		for key, val := range *in {
			var outVal []byte
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	if in.NestedMapOfInfo != nil {
		in, out := &in.NestedMapOfInfo, &out.NestedMapOfInfo
		*out = make(NestedMapOfInfo, len(*in))
		for key, val := range *in {
			var outVal []byte
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
	out.StructWithSeveralFields = in.StructWithSeveralFields
	out.NestedStructWithSeveralFields = in.NestedStructWithSeveralFields
	out.NestedStructWithSeveralFieldsDoubleMarked = in.NestedStructWithSeveralFieldsDoubleMarked
	if in.JustNestedObject != nil {
		in, out := &in.JustNestedObject, &out.JustNestedObject
		*out = new(JustNestedObject)
		**out = **in
	}
	out.MinMaxProperties = in.MinMaxProperties
	if in.Schemaless != nil {
		in, out := &in.Schemaless, &out.Schemaless
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.IntOrStringWithAPattern != nil {
		in, out := &in.IntOrStringWithAPattern, &out.IntOrStringWithAPattern
		*out = new(intstr.IntOrString)
		**out = **in
	}
	if in.NestedMap != nil {
		in, out := &in.NestedMap, &out.NestedMap
		*out = make(map[string]map[string]string, len(*in))
		for key, val := range *in {
			var outVal map[string]string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(map[string]string, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.NestedNestedMap != nil {
		in, out := &in.NestedNestedMap, &out.NestedNestedMap
		*out = make(map[string]map[string]map[string]string, len(*in))
		for key, val := range *in {
			var outVal map[string]map[string]string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(map[string]map[string]string, len(*in))
				for key, val := range *in {
					var outVal map[string]string
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = make(map[string]string, len(*in))
						for key, val := range *in {
							(*out)[key] = val
						}
					}
					(*out)[key] = outVal
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.ContainsNestedMapMap != nil {
		in, out := &in.ContainsNestedMapMap, &out.ContainsNestedMapMap
		*out = make(map[string]ContainsNestedMap, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.MapOfArraysOfFloats != nil {
		in, out := &in.MapOfArraysOfFloats, &out.MapOfArraysOfFloats
		*out = make(map[string][]bool, len(*in))
		for key, val := range *in {
			var outVal []bool
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]bool, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CronJobSpec.
func (in *CronJobSpec) DeepCopy() *CronJobSpec {
	if in == nil {
		return nil
	}
	out := new(CronJobSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CronJobStatus) DeepCopyInto(out *CronJobStatus) {
	*out = *in
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = make([]v1.ObjectReference, len(*in))
		copy(*out, *in)
	}
	if in.LastScheduleTime != nil {
		in, out := &in.LastScheduleTime, &out.LastScheduleTime
		*out = (*in).DeepCopy()
	}
	if in.LastScheduleMicroTime != nil {
		in, out := &in.LastScheduleMicroTime, &out.LastScheduleMicroTime
		*out = (*in).DeepCopy()
	}
	if in.LastActiveLogURL != nil {
		in, out := &in.LastActiveLogURL, &out.LastActiveLogURL
		*out = new(URL)
		(*in).DeepCopyInto(*out)
	}
	if in.LastActiveLogURL2 != nil {
		in, out := &in.LastActiveLogURL2, &out.LastActiveLogURL2
		*out = new(URL2)
		(*in).DeepCopyInto(*out)
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = new(Duration)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CronJobStatus.
func (in *CronJobStatus) DeepCopy() *CronJobStatus {
	if in == nil {
		return nil
	}
	out := new(CronJobStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Duration) DeepCopyInto(out *Duration) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Duration.
func (in *Duration) DeepCopy() *Duration {
	if in == nil {
		return nil
	}
	out := new(Duration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EmpiableObject) DeepCopyInto(out *EmpiableObject) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EmpiableObject.
func (in *EmpiableObject) DeepCopy() *EmpiableObject {
	if in == nil {
		return nil
	}
	out := new(EmpiableObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JustNestedObject) DeepCopyInto(out *JustNestedObject) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JustNestedObject.
func (in *JustNestedObject) DeepCopy() *JustNestedObject {
	if in == nil {
		return nil
	}
	out := new(JustNestedObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MinMaxObject) DeepCopyInto(out *MinMaxObject) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MinMaxObject.
func (in *MinMaxObject) DeepCopy() *MinMaxObject {
	if in == nil {
		return nil
	}
	out := new(MinMaxObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in NestedAssociativeList) DeepCopyInto(out *NestedAssociativeList) {
	{
		in := &in
		*out = make(NestedAssociativeList, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NestedAssociativeList.
func (in NestedAssociativeList) DeepCopy() NestedAssociativeList {
	if in == nil {
		return nil
	}
	out := new(NestedAssociativeList)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in NestedMapOfInfo) DeepCopyInto(out *NestedMapOfInfo) {
	{
		in := &in
		*out = make(NestedMapOfInfo, len(*in))
		for key, val := range *in {
			var outVal []byte
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NestedMapOfInfo.
func (in NestedMapOfInfo) DeepCopy() NestedMapOfInfo {
	if in == nil {
		return nil
	}
	out := new(NestedMapOfInfo)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NestedObject) DeepCopyInto(out *NestedObject) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NestedObject.
func (in *NestedObject) DeepCopy() *NestedObject {
	if in == nil {
		return nil
	}
	out := new(NestedObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NestedStructWithSeveralFields) DeepCopyInto(out *NestedStructWithSeveralFields) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NestedStructWithSeveralFields.
func (in *NestedStructWithSeveralFields) DeepCopy() *NestedStructWithSeveralFields {
	if in == nil {
		return nil
	}
	out := new(NestedStructWithSeveralFields)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Preserved) DeepCopyInto(out *Preserved) {
	*out = *in
	if in.Rest != nil {
		in, out := &in.Rest, &out.Rest
		*out = make(map[string]interface{}, len(*in))
		for key, val := range *in {
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Preserved.
func (in *Preserved) DeepCopy() *Preserved {
	if in == nil {
		return nil
	}
	out := new(Preserved)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RootObject) DeepCopyInto(out *RootObject) {
	*out = *in
	out.Nested = in.Nested
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RootObject.
func (in *RootObject) DeepCopy() *RootObject {
	if in == nil {
		return nil
	}
	out := new(RootObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *URL) DeepCopyInto(out *URL) {
	*out = *in
	in.URL.DeepCopyInto(&out.URL)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new URL.
func (in *URL) DeepCopy() *URL {
	if in == nil {
		return nil
	}
	out := new(URL)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *URL2) DeepCopyInto(out *URL2) {
	*out = *in
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = new(url.Userinfo)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new URL2.
func (in *URL2) DeepCopy() *URL2 {
	if in == nil {
		return nil
	}
	out := new(URL2)
	in.DeepCopyInto(out)
	return out
}
