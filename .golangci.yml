run:
  skip-files:
    - "zz_generated\\..+\\.go$"
  modules-download-mode: "readonly"
linters:
  disable-all: true
  enable:
    - durationcheck
    - exportloopref
    - forcetypeassert
    - gocritic
    - makezero
    - nosprintfhostport
    - asciicheck
    - depguard
    - gosec
    - prealloc
    - revive
    - unconvert
    - unparam
    - errcheck
    - govet
    - stylecheck
    - gosimple
    - unused
    - staticcheck
    - goimports
    - gofmt
    - nilerr
    - tenv
    - usestdlibvars
    - forbidigo
    - gofumpt
    - bodyclose
    - sloglint

linters-settings:
  forbidigo:
    exclude-godoc-examples: true
    forbid:
      - p: .*http\.(Get|Post).*
        msg:
          Do not use Get/Post methods exported by "http" package, they use global http client, which doesnt have proper timeouts. Use http client created for example by github.com/hashicorp/go-cleanhttp.
          It should be created in main func and passed down to any struct that uses it.
      - p: .*http\.DefaultClient.*
        msg:
          Do not use http.DefaultClient, it is a global struct without proper timeouts. Use http client created for example by github.com/hashicorp/go-cleanhttp.
          It should be created in main func and passed down to any struct that uses it.
  usestdlibvars:
    time-month: true
    time-layout: true
    crypto-hash: true
  goimports:
    local-prefixes: aerf.io/provider-k8s
  gofmt:
    simplify: true
    rewrite-rules:
      - pattern: "interface{}"
        replacement: "any"
      - pattern: "a[b:len(a)]"
        replacement: "a[b:]"
  gofumpt:
    module-path: aerf.io/provider-k8s
    extra-rules: true
  depguard:
    rules:
      no-sync-atomic:
        deny:
          - pkg: "sync/atomic"
            desc: "please use type-safe atomics from go.uber.org/atomic"
      no-old-yaml-pkg:
        deny:
          - pkg: "gopkg.in/yaml.v2"
            desc: "please use gopkg.in/yaml.v3, not v2"
      no-exp-slog:
        deny:
          - pkg: "golang.org/x/exp/slog"
            desc: 'please use "log/slog" instead'
      only-std-errors-pkg:
        deny:
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib "errors" package/"fmt.Errorf"/"go.uber.org/multierr" package or "github.com/crossplane/crossplane-runtime/pkg/errors"
          - pkg: "github.com/go-errors/errors"
            desc: Should be replaced by standard lib "errors" package/"fmt.Errorf"/"go.uber.org/multierr" package or "github.com/crossplane/crossplane-runtime/pkg/errors"
          - pkg: "golang.org/x/xerrors"
            desc: Should be replaced by standard lib "errors" package/"fmt.Errorf"/"go.uber.org/multierr" package or "github.com/crossplane/crossplane-runtime/pkg/errors"
  errcheck:
    check-blank: true
  gocritic:
    enabled-tags:
      - performance
      - diagnostic
      - opinionated
      - style
      - experimental
    disabled-checks:
      - rangeValCopy
      - unnamedResult
      - hugeParam
      - paramTypeCombine # automatically fixed by gofumpt
      - typeDefFirst
  gosec:
    excludes:
      - G108 # Profiling endpoint automatically exposed on /debug/pprof - https://github.com/securego/gosec#available-rules
  revive:
    rules:
      - name: indent-error-flow
        disabled: true
issues:
  exclude-use-default: true
  exclude-rules:
    - linters:
        - revive
      text: "blank-imports"

    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - forbidigo
      text: "http"
    - path: _test\.go
      linters:
        # failed type asserts are fine in tests because it's development and Go's test harness catches panics, which are risen where the type asssertion fails
        - forcetypeassert
        - goconst
